//----------------------------------------------------------
// This function is the only function that's called.
// This strategy gives us better control of the page.
//----------------------------------------------------------
function doAll() {
  firebase.auth().onAuthStateChanged((user) => {
    if (user) {
      insertNameFromFirestore(user);
      getBookmarks(user);
    } else {
      console.log("No user is signed in");
    }
  });
}
doAll();

//----------------------------------------------------------
// Wouldn't it be nice to see the User's Name on this page?
// Let's do it!  (Thinking ahead:  This function can be carved out,
// and put into script.js for other pages to use as well).
//----------------------------------------------------------//----------------------------------------------------------
function insertNameFromFirestore(user) {
  db.collection("users")
    .doc(user.uid)
    .get()
    .then((userDoc) => {
      console.log(userDoc.data().name);
      userName = userDoc.data().name;
      console.log(userName);
      document.getElementById("name-goes-here").innerHTML = userName;
    });
}

//----------------------------------------------------------
// This function takes input param User's Firestore document pointer
// and retrieves the "saved" array (of bookmarks)
// and dynamically displays them in the gallery
//----------------------------------------------------------
function getBookmarks(user) {
  db.collection("users")
    .doc(user.uid)
    .get()
    .then((userDoc) => {
      // Get the Array of bookmarks
      var bookmarks = userDoc.data().bookmarks;
      console.log(bookmarks);

      // Get pointer the new card template
      let newcardTemplate = document.getElementById("savedCardTemplate");

      // Iterate through the ARRAY of bookmarked hikes (document ID's)
      bookmarks.forEach((thisHikeID) => {
        console.log(thisHikeID);
        db.collection("hikes")
          .doc(thisHikeID)
          .get()
          .then((doc) => {
            var title = doc.data().name; // get value of the "name" key
            var hikeCode = doc.data().code; //get unique ID to each hike to be used for fetching right image
            var hikeLength = doc.data().length; //gets the length field
            var docID = doc.id; //this is the autogenerated ID of the document

            //clone the new card
            let newcard = newcardTemplate.content.cloneNode(true);

            //update title and some pertinant information
            newcard.querySelector(".card-title").innerHTML = title;
            newcard.querySelector(".card-length").innerHTML = hikeLength + "km";
            newcard.querySelector(
              ".card-image"
            ).src = `./images/${hikeCode}.jpg`; //Example: NV01.jpg
            newcard.querySelector("a").href = "eachHike.html?docID=" + docID;

            // Add a checkbox to each hike card
            let checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.checked = bookmarks.includes(thisHikeID); // Check if the hike is already bookmarked
            checkbox.addEventListener("change", () =>
              updateHike(user, thisHikeID, checkbox.checked)
            );

            // Append the checkbox to the card
            newcard.querySelector(".card-body").appendChild(checkbox);

            // Finally, attach this new card to the gallery
            hikeCardGroup.appendChild(newcard);

            //NEW LINE: update to display length, duration, last updated
            newcard.querySelector(".card-length").innerHTML =
              "Length: " +
              doc.data().length +
              " km <br>" +
              "Duration: " +
              doc.data().hike_time +
              "min <br>" +
              "Last updated: " +
              doc.data().last_updated.toDate().toLocaleDateString();

            //Finally, attach this new card to the gallery
            hikeCardGroup.appendChild(newcard);
          });
      });
    });
}

//----------------------------------------------------------
// Function to update bookmarks when icon is clicked
//----------------------------------------------------------
function updateHike(user, hikeID, isBookmarked) {
  const userRef = db.collection("users").doc(user.uid);
  const updateAction = isBookmarked
    ? firebase.firestore.FieldValue.arrayRemove(hikeID)
    : firebase.firestore.FieldValue.arrayUnion(hikeID);

  userRef
    .update({ bookmarks: updateAction })
    .then(() => {
      console.log(`Bookmark ${isBookmarked ? "removed" : "added"}`);
      // Refresh bookmarks after update
      getBookmarks(user);
    })
    .catch((error) => {
      console.error("Error updating bookmarks:", error);
    });
}

//----------------------------------------------------------
// Modified getBookmarks function with bookmark toggle
//----------------------------------------------------------
function getBookmarks(user) {
  const hikeCardGroup = document.getElementById("hikeCardGroup");
  hikeCardGroup.innerHTML = ""; // Clear current cards

  db.collection("users")
    .doc(user.uid)
    .get()
    .then((userDoc) => {
      const bookmarks = userDoc.data().bookmarks || [];

      bookmarks.forEach((thisHikeID) => {
        db.collection("hikes")
          .doc(thisHikeID)
          .get()
          .then((doc) => {
            const hikeData = doc.data();
            const newcard = document
              .getElementById("savedCardTemplate")
              .content.cloneNode(true);

            // Populate card content
            newcard.querySelector(".card-title").textContent = hikeData.name;
            newcard.querySelector(
              ".card-image"
            ).src = `./images/${hikeData.code}.jpg`;
            newcard.querySelector("a").href = `eachHike.html?docID=${doc.id}`;

            // Bookmark icon setup
            const bookmarkIcon = newcard.querySelector(".material-icons");
            bookmarkIcon.textContent = "bookmark"; // Filled icon for saved items
            bookmarkIcon.style.cursor = "pointer";
            bookmarkIcon.title = "Remove from bookmarks";

            // Add click handler for bookmark toggle
            bookmarkIcon.addEventListener("click", (e) => {
              e.preventDefault(); // Prevent link navigation
              updateHike(user, doc.id, true);
            });

            // Update card details
            const detailsElement = newcard.querySelector(".card-length");
            detailsElement.innerHTML = `
          Length: ${hikeData.length}km<br>
          Duration: ${hikeData.hike_time}min<br>
          Last updated: ${hikeData.last_updated.toDate().toLocaleDateString()}
        `;

            hikeCardGroup.appendChild(newcard);
          });
      });
    });
}
